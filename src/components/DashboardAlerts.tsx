"use client";
import { useState, useEffect } from "react";

interface Alert {
  id: string;
  type: 'warning' | 'error' | 'info' | 'success';
  title: string;
  message: string;
  timestamp: Date;
}

interface DashboardAlertsProps {
  incidents: any[];
  maintenance: any[];
  flights: any[];
}

export default function DashboardAlerts({ incidents, maintenance, flights }: DashboardAlertsProps) {
  const [alerts, setAlerts] = useState<Alert[]>([]);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
  const generateAlerts = () => {
    const newAlerts: Alert[] = [];

    // –ê–ª–µ—Ä—Ç—ã –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º
    incidents.forEach((incident: any) => {
      if (incident.severity === 'Critical') {
        newAlerts.push({
          id: `incident-${incident.incident_id}`,
          type: 'error',
          title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç',
          message: `–†–µ–π—Å ${incident.flight?.flight_number || 'N/A'}: ${incident.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`,
          timestamp: new Date(incident.incident_time)
        });
      } else if (incident.severity === 'High') {
        newAlerts.push({
          id: `incident-${incident.incident_id}`,
          type: 'warning',
          title: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞',
          message: `–†–µ–π—Å ${incident.flight?.flight_number || 'N/A'}: ${incident.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`,
          timestamp: new Date(incident.incident_time)
        });
      }
    });

    // –ê–ª–µ—Ä—Ç—ã –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
    if (maintenance.length > 3) {
      newAlerts.push({
        id: 'maintenance-overload',
        type: 'warning',
        title: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        message: `–ê–∫—Ç–∏–≤–Ω–æ ${maintenance.length} —Ä–∞–±–æ—Ç –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é`,
        timestamp: new Date()
      });
    }

    // –ê–ª–µ—Ä—Ç—ã –ø–æ —Ä–µ–π—Å–∞–º
    const delayedFlights = flights.filter((f: any) => f.status === 'Delayed');
    if (delayedFlights.length > 0) {
      newAlerts.push({
        id: 'delayed-flights',
        type: 'info',
        title: '–ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ —Ä–µ–π—Å—ã',
        message: `${delayedFlights.length} —Ä–µ–π—Å–æ–≤ –∑–∞–¥–µ—Ä–∂–∞–Ω–æ`,
        timestamp: new Date()
      });
    }

    setAlerts(newAlerts);
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    generateAlerts();
  }, [incidents, maintenance, flights]);

  const getAlertIcon = (type: Alert['type']) => {
    switch (type) {
      case 'error':
        return 'üö®';
      case 'warning':
        return '‚ö†Ô∏è';
      case 'info':
        return '‚ÑπÔ∏è';
      case 'success':
        return '‚úÖ';
      default:
        return 'üì¢';
    }
  };

  const getAlertColor = (type: Alert['type']) => {
    switch (type) {
      case 'error':
        return 'border-red-500 bg-red-50';
      case 'warning':
        return 'border-yellow-500 bg-yellow-50';
      case 'info':
        return 'border-blue-500 bg-blue-50';
      case 'success':
        return 'border-green-500 bg-green-50';
      default:
        return 'border-gray-500 bg-gray-50';
    }
  };

  const dismissAlert = (id: string) => {
    setAlerts(alerts.filter(alert => alert.id !== id));
  };

  if (alerts.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
        <div className="text-gray-500 text-center py-4">
          –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-md p-6 mb-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
      <div className="space-y-3">
        {alerts.slice(0, 5).map((alert) => (
          <div
            key={alert.id}
            className={`border-l-4 p-4 rounded-r-lg ${getAlertColor(alert.type)}`}
          >
            <div className="flex items-start justify-between">
              <div className="flex items-start space-x-3">
                <span className="text-xl">{getAlertIcon(alert.type)}</span>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900">{alert.title}</h4>
                  <p className="text-sm text-gray-600 mt-1">{alert.message}</p>
                  <p className="text-xs text-gray-400 mt-2">
                    {alert.timestamp.toLocaleString('ru-RU')}
                  </p>
                </div>
              </div>
              <button
                onClick={() => dismissAlert(alert.id)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                ‚úï
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
} 